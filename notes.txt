Notes on SAMP over HTTPS.
=========================

Actors:
   Web application
   Relay
      Collector
      Dispenser
   Hub

(note that in some previous versions of this package, the Relay
was known as the Proxy Hub or Bouncer, and the Hub as the Localhost Hub).


URL translation:
----------------
Not done.  It would be possible, but requires additional API for
all four actors.

There needs to be some mechanism for the web application to find
a URL (in the Relay) providing the content of a potentially
inaccessible URL.  In the Web Profile, this is just prepending
a string to the URL before using it.  That probably can work
here too, but retrieving that URL will have to trigger acquisition
of the data.  Something (dispenser, probably) has to adjust the
RegInfo registry return value to provide the right samp.url-translator
(presumably pointing to somewhere near the Relay).
That's a shame, because otherwise the web application is exchanging
exactly the same messages in the TLS profile as the Web profile.

The web application, in principle, has to nudge the hub
when it is about to retrieve a potentially inaccessible URL.
In practice, with the current arrangement of waiting for calls
for a few seconds after the last nudge, this probably isn't required.

When the relay services a content request that it's proxying for,
it has to synchronously submit a request (via long poll callback)
to the hub for the content, wait for the result, and
then feed it back to the web app.  This may time out if the resource
is long/slow to download.  It could make sense to cache it,
though if you do it this way no caching (and no cache clearing
policy) is required.  Probably better.  But note that unlike
the XML-RPC calls and SAMP Messages, this is bulk data getting
bounced long distances, undesirable.

In case the relay can determine that the target URL is actually
accessible by the requesting client, the service can and should
emit a 302(?) redirect.

Note however that nearly all URLs will need to be proxied if their
content is required by the web application.  It's not just file:///
and http://localhost, it's any http:// URL as well.
Only https URLs will work directly.


Security:
---------

This is SAMP over HTTPS, not necessarily secure SAMP.
The calls, messages and bulk data are getting transmitted off-host,
which under Web SAMP they don't have to be.  Probably it's using
HTTPS, which helps (though currently the hub-relay
communications are not *required* to be HTTPS).
The Hub has more complicated trust arrangements:
it has to trust off-host processes to some extent.
That could be mitigated by using per-hub, per-client, or per-message
authentication tokens, not currently in place.


Message identification:
-----------------------

How do messages on the Relay get identified for dispatch to the Hub?

At present, the collection request incoming to the dispenser is
examined for its originating host, and any messages for collection
that originated on the same host are dispatched.
This is more or less what's required - messages should come from
and go to the same host, and there's no issue with multiple
hubs on the same host, since the TLS profile, like the Web Profile,
can only have one hub per host because they work using a single
well-known port.

But there are (at least?) two problems with this scenario.

First, the host determined from the collection request could be
an HTTP proxy rather than the host on which the hub runs.
javax.servlet.ServletRequest.getRemote{Addr,Host} javadocs say
that they report the identity of the "... client or last proxy
that sent the request".  Probably(?) this won't break the link
between receiver and dispatcher identifiers, since both requests
will presumably(?) go through the same proxy.  However, it could
map multiple hosts to the same identifier (if they use the same
proxy).  This is probably therefore fatal.

Second, a malicious or poorly-implemented relay could dispense
XML-RPC calls originating from a different web application (or
from none at all), i.e. one which is not running on the local host.
That could be quite damaging, because e.g. a registration request
from a quite different (possibly malicious) client could pop up
at just the time you're expecting one.

So really, the hub wants to be assured that it's picking
up a call that originates from a web application running on the
local host.  That can in principle be done: make sure that the
web application includes an unguessable identification token
with the nudge message.  To defend against a malicious relay,
this should come in two parts: token T1 to identify the localhost
(so the relay knows which one to send) and token T2 authenticate
the message (so the hub knows that the message actually
came from the web client on the localhost) - only T1 is sent
by the hub in the dispense request.
Bit fiddly, but doable.


Transport:
----------

I'm using long polls in both directions (the hub is making
long polls for callbacks - some of those callbacks are carrying out
long polls in the opposite direction).  It does seem to work, but
it's crying out to use web sockets.  However, that would require a
whole new load of standardisation activity to define how the SAMP
abstract communications API maps to some WebSocket-friendly wire
protocol.  SAMP is set up to make this eminently possible, but 
it's probably a lot of new text.  Given that, maybe the Web Profile
should get the same treatment.  I don't know if I can face it.

If I could: what RPC mechanism would we use?  Probably WAMP which
generally uses JSON for serialization (wampy.js, jawampa).
It also has a very suitable architecture, uses a router which
could live on the relay.  I'm sure it's doable, but, oof.

One problem is putting the required libraries in place.
For JS, there are some options that are not too painful
(e.g. wampy).  For java, it looks like jawampa, which requires
netty, rxjava, jackson-databind and maybe msgpack.
Altogether about 4Mb (cf jsamp.jar about 0.7Mb).
In python there is Autobahn|Python, which looks like it's OK.


Nomenclature:
-------------

Needs some thought.  Probably some things need to be renamed, I should
make consistent use of different terms for different actors in the
protocol documentation, the source code, and API names.

"Nudge" should be used consistently for the web client->hub alert


Complexity:
-----------

2-3 languages, 2-3 hosts, 3-4 client-server vectors, 3 APIs, 4 processes.
It's complicated, there's lots to go wrong, debugging is fiendishly
difficult.  Hard to know if you've grasped all the security implications.
Probably nobody will understand it apart from me.

Deployment actually isn't too bad: the javascript client library
can be updated without that much difficulty to work for either
HTTP or HTTPS.  The relay can be supplied as a war file and
dropped into a servlet container.  The hub profile can be plugged
into an existing hub.

Multiple implementations: we should have an AstroPy hub
profile implementation at least - who's going to do that?
I asked astropy-dev, and apparently Tom Robitaille is primary
maintainer for astropy.vo.samp, so would be the first point of
contact.
I could write a java client implementation I suppose.
There should be an independent Relay implementation - node.js?
I wonder who will do that.

Note however that in most cases, Web SAMP just does something
pretty simple - sends a table.load.votable or similar from
the non-Callable web client to non-web clients.
Often uses notifyAll.  In this case, XML-RPC callbacks are not
required, and the communications don't involve either large
payloads or many messages.


Efficiency:
-----------

This loads servers with additional requests that are really not
their business (internal remote client communications).
Could be lots of messages if lots of people are using it.
Probably not though.  If large files are getting slung around,
that's another significant performance hit.  In most current
SAMP usage that doesn't happen though.


Conclusions:
------------

Having written this: most of these issues would go away if I bit
the bullet and did it using web sockets, probably WAMP.
From a cursory look, the architecture looks like it fits right
in to what we need (WAMP message broker sits on the Relay).

So, it could be back to the drawing board.  I've probably burned
about 10 days getting it working with XML-RPC.  Hmm.
Some of the work (on top of that 10 days) is re-usable though -
wrangling certificates, understanding HTTPS and servlets etc,
writing the presentation for Edinburgh (which is nearly all
still relevant).



