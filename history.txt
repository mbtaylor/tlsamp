proto1:

Initial working version of protocol.

In this version the relay matches the message source client
and target hub implicitly, using the hostname attached to the
HTTP requests they come from.  It works in (my) tests, but is
vulnerable to the fact that different client hosts may be
mapped to the same hostnames if they go through HTTP proxies,
which would cause confusion.  There are also security issues
(an untrustworthy hub could send spurious messages), but if
you're trusting the page that indicates a relay's location,
you might as well trust the relay as well.

proto2:

Each call has a (hopefully) unique callTag generated by the web client.
That is passed to the hub in the nudge, and transmitted with the
call to the relay.  The hub can then retrived the submitted call
by presenting the callTag.  This is more robust, though introduces
a bit more overhead.

I tried for some while to add some URL translation capability
(probably better named Resource Relay in this context).
I came up with various schemes, but all look fairly horrible
to codify.  The problem is that the relay has to provide this from
a URL, but it has to solicit it from the hub.  To avoid large
XML-RPC payloads, that means the hub has to POST/PUT the relevant
resource content somewhere in the relay on request.  Streaming
isn't too hard to code, though whether servlet containers would
honour this may be in doubt.  But just passing all the information
between the three actors about where the data is and should end
up is very messy.  This capability is really a minority interest;
the only instances I know of URL translation in use with the
Web Profile are SED loads by ASDC (Primavera 04/2014) and
ds9 control at ESAC 14/01/2016, Salgado).  So for now I'm going
to declare it unsupported, and see who complains, and also if
anybody actually gets off their arse and deploys tlsamp.

But for the record, my best guess so far of what it would look
like is:

   new XML-RPC call from web client to relay:

      samp.tlshub.requestResource(callTag, privateKey, targetUrl)

   accompanied as usual by a Nudge(callTag), and forwarded to the
   hub as usual.

   The hub then checks avilability of the resource, and returns a
   success/error XML-RPC response as usual.
   If success the hub then it posts the resource to a resource-relay URL,
   relay streams it to a GET from the web client when that arrives.

   Apart from the ticklish choreography, working out the relay URL is
   tricky: probably relay-url key in the regInfo map + clientTag.
   But how does the relay pass that to the hub?  All doable, but
   very fiddly to specify.

